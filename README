# README

# INTRODUCTION

This script is meant to be run on the cluster. This is a bash script that is
then converted into a job script because there is not a good way to pass variables
into the LSF job framework. This script takes in a fastq file and processes it
spitting out sam, bam, bed, bigwig and peak files.
Steps:
- Align to genome: sam file
- Convert to bam: bam file
- Remove reads that have a map quality score less than 5: bam file
- Sort reads: bam file
- Mark reads that are duplicates: bam file
- Remove reads that are duplicates: bam file
- Only keep reads from Chr2L,2R,3L,3R,4,X: bam file
- Convert to bed: bed file
- Convert to bigwig: bw file
- Call peaks using MACS2

# SETUP

Before ever running this script, some setup is needed.

1. Create a folder in your home directory called RefGenome
and store the dm3 reference genome and index files in it. For example, mine
are in this path: /nas02/home/j/k/jkumar12/McKayLab/RefGenome (you can use bash expansion like ~/RefGenome/)

2. Create a folder called ControlGenomicDNA in your home directory and store
the file ControlGenomicDNA_q5_sorted_dupsRemoved_noYUHet.bed in it.
For example, mine is in this path: /nas02/home/j/k/jkumar12/McKayLab/ControlGenomicDNA
	* 07.21.2016 - SLN * This is no longer necessary. The ControlGenomicDNA directory is contained within this repository.

3. Edit executeFAIRESeqReadsAndCallMACSPeaks.sh:
	* Under the Set parameters field, configure the variables in the comment block 
	* Do not reconfigure the USR or NETSCR variables. They will autodetect your username and location of netscr.
	* Point REFGENEPATH to the reference genome file from #1
	* CTRLPATH should point to the ControlGenomicDNA folder downloaded with this repository, unless you want to use a different one
	* QUEUE will change which queue to submit to on Killdevil. Day should be fine for our usage.
	* stdOUT and stdERR point to the directories where the standard output and standard error will be stored (your netscr by default)
		* Error files and standard output files are very useful in helping to debug if something goes wrong.


5. Store the bash script in your home directory. Nothing in your home directory
gets deleted unlike your scratch directory but it does have limited space.
This is why I store all the data in scratch and move it to my local directory
as needed.

You don't ever have to make changes now to the script once this setup is done.

# HOW TO RUN SCRIPT

So you have fastq file with sequenced reads from your FAIRE experiment and you
are excited to process it!

0. I would recommend doing a quick quality check on your fastq file using
fastqc. Make sure the base qualities are decent if not, you may need to do some
trimming using the fastx package.

1. Store the fastq file (which you have done some QA on and may have trimmed
or not) in your scratch directory. e.g. /netscr/jkumar12/
Make sure to name your fastq appropriately as this name will be used as the root
for all the rest of the files created.

2. You need to load all the modules you need for this script.
Bowtie2, Samtools, Bedtools, Picard, DeepTools, MACS2

NOTE: As of July 13th, 2016 the script currently works with bowtie2/2.2.8,
samtools/1.3.1, bedtools/2.25.0, picard/2.2.4, deeptools/2.2.4 and macs/2015-06-03

3. Move to the home directory where the bash script is stored.

4. If you want to just process your fastq file without calling peaks, run the
commmand: ./executeFAIRESeqReadsAndCallMACSPeaks exptname Align None
e.g. if my fastq file is called 24hAPF_Rep1.fastq, then I would run the
command: ./executeFAIRESeqReadsAndCallMACSPeaks 24hAPF_Rep1 Align None

5. If you want to only call peaks because you have previously processed your
fastq file, run the command:
./executeFAIRESeqReadsAndCallMACSPeaks exptname None CallPeaks
e.g. if my fastq file is called 24hAPF_Rep1.fastq, then I would run the
command: ./executeFAIRESeqReadsAndCallMACSPeaks 24hAPF_Rep1 None CallPeaks

6. If you want to process your fastq file and call peaks, run the command:
./executeFAIRESeqReadsAndCallMACSPeaks exptname Align CallPeaks
e.g. if my fastq file is called 24hAPF_Rep1.fastq, then I would run the
command: ./executeFAIRESeqReadsAndCallMACSPeaks 24hAPF_Rep1 Align CallPeaks
